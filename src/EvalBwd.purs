module EvalBwd where

import Prelude hiding (absurd, top)

import Bind (Var, varAnon)
import Control.Apply (lift2)
import Control.Monad.Except (class MonadError)
import Data.Exists (mkExists, runExists)
import Data.Foldable (foldr)
import Data.FoldableWithIndex (foldrWithIndex)
import Data.List (List(..), range, reverse, unsnoc, unzip, zip, (:))
import Data.List.NonEmpty (NonEmptyList(..))
import Data.Newtype (unwrap, wrap)
import Data.NonEmpty (foldl1)
import Data.Profunctor.Strong (second)
import Data.Set (fromFoldable) as Set
import Data.Tuple (fst, snd, uncurry)
import DataType (cPair)
import Dict (Dict(..))
import Dict (empty, fromFoldable) as D
import Effect.Exception (Error)
import Eval (eval)
import Expr (Cont(..), Elim(..), Expr(..), RecDefs(..), VarDef(..), bv)
import GaloisConnection (GaloisConnection(..))
import Lattice (Raw, ùîπ, (‚à®), bot, botOf, expand, top)
import Partial.Unsafe (unsafePartial)
import Trace (AppTrace(..), Trace(..), VarDef(..)) as T
import Trace (AppTrace, ForeignTrace(..), ForeignTrace'(..), Match(..), Trace)
import Util (type (√ó), (!), (√ó), Endo, absurd, definitely', error, isEmpty, nonEmpty, singleton, defined)
import Util.Map (append_inv, disjointUnion, disjointUnion_inv, get, insert, intersectionWith, keys, maplet, toUnfoldable, (<+>))
import Util.Pair (zip) as P
import Util.Set (empty, (‚à™))
import Val (BaseVal(..), Fun(..)) as V
import Val (class Ann, DictRep(..), Env, EnvExpr(..), ForeignOp(..), ForeignOp'(..), MatrixRep(..), Val(..))

closeDefsBwd :: forall a. Ann a => Env a -> Env a √ó Dict (Elim a) √ó a
closeDefsBwd Œ≥ =
   case foldrWithIndex joinDefs (empty √ó empty √ó empty √ó bot) (unwrap Œ≥) of
      œÅ' √ó Œ≥' √ó œÅ √ó Œ± -> Œ≥' √ó (œÅ ‚à® œÅ') √ó Œ±
   where
   joinDefs :: Var -> Val a -> Endo (Dict (Elim a) √ó Env a √ó Dict (Elim a) √ó a)
   joinDefs f _ (œÅ_acc √ó Œ≥' √ó œÅ √ó Œ±) =
      case get f Œ≥ of
         Val Œ±_f (V.Fun (V.Closure Œ≥_f œÅ_f œÉ_f)) ->
            (œÅ_acc # insert f œÉ_f) √ó (Œ≥' ‚à® Œ≥_f) √ó (œÅ ‚à® œÅ_f) √ó (Œ± ‚à® Œ±_f)
         _ -> error absurd

matchBwd :: forall a. Ann a => Env a -> Cont a -> a -> Match -> Val a √ó Elim a
matchBwd Œ≥ Œ∫ _ (MatchVar x v)
   | keys Œ≥ == singleton x = get x Œ≥ √ó ElimVar x Œ∫
   | otherwise = botOf v √ó ElimVar x Œ∫
matchBwd Œ≥ Œ∫ _ (MatchVarAnon v)
   | isEmpty Œ≥ = botOf v √ó ElimVar varAnon Œ∫
   | otherwise = error absurd
matchBwd œÅ Œ∫ Œ± (MatchConstr c ws) = Val Œ± (V.Constr c vs) √ó ElimConstr (maplet c Œ∫')
   where
   vs √ó Œ∫' = matchManyBwd œÅ Œ∫ Œ± (reverse ws)
matchBwd œÅ Œ∫ Œ± (MatchRecord xws) = Val Œ± (V.Record (zip xs vs # D.fromFoldable # wrap)) √ó
   ElimRecord (Set.fromFoldable $ keys xws) Œ∫'
   where
   xs √ó ws = xws # toUnfoldable # unzip
   vs √ó Œ∫' = matchManyBwd œÅ Œ∫ Œ± (ws # reverse)

matchManyBwd :: forall a. Ann a => Env a -> Cont a -> a -> List Match -> List (Val a) √ó Cont a
matchManyBwd Œ≥ Œ∫ _ Nil
   | isEmpty Œ≥ = Nil √ó Œ∫
   | otherwise = error absurd
matchManyBwd Œ≥Œ≥' Œ∫ Œ± (w : ws) =
   (vs <> v : Nil) √ó Œ∫'
   where
   Œ≥ √ó Œ≥' = disjointUnion_inv (bv w) Œ≥Œ≥'
   v √ó œÉ = matchBwd Œ≥ Œ∫ Œ± w
   vs √ó Œ∫' = matchManyBwd Œ≥' (ContElim œÉ) Œ± ws

applyBwd :: forall a. Ann a => AppTrace √ó Val a -> Val a √ó Val a
applyBwd (T.AppClosure xs w t3 √ó v) =
   Val (Œ≤ ‚à® Œ≤') (V.Fun (V.Closure (Œ≥1 ‚à® Œ≥1') Œ¥' œÉ)) √ó v'
   where
   Œ≥1Œ≥2Œ≥3 √ó e √ó Œ≤ = evalBwd' v t3
   Œ≥1Œ≥2 √ó Œ≥3 = append_inv (bv w) Œ≥1Œ≥2Œ≥3
   Œ≥1 √ó Œ≥2 = append_inv xs Œ≥1Œ≥2
   Œ≥1' √ó Œ¥' √ó Œ≤' = closeDefsBwd Œ≥2
   v' √ó œÉ = matchBwd Œ≥3 (ContExpr e) Œ≤ w
applyBwd (T.AppForeign n (ForeignTrace (id √ó t)) √ó v) =
   Val Œ± (V.Fun (V.Foreign œÜ vs'')) √ó v2'
   where
   œÜ √ó Œ± √ó { init: vs'', last: v2' } = second (second (definitely' <<< unsnoc)) $ runExists applyBwd' t
      where
      applyBwd' :: forall t. ForeignTrace' t -> ForeignOp √ó a √ó List (Val _)
      applyBwd' (ForeignTrace' (ForeignOp' œÜ) t') =
         ForeignOp (id √ó mkExists (ForeignOp' œÜ)) √ó
            if œÜ.arity > n then unsafePartial $ let Val Œ± (V.Fun (V.Foreign _ vs'')) = v in Œ± √ó vs''
            else bot √ó œÜ.op_bwd (definitely' t' √ó v)
applyBwd (T.AppConstr c √ó v) =
   Val Œ≤ (V.Fun (V.PartialConstr c vs')) √ó v2
   where
   vs √ó Œ≤ = case v of
      Val Œ≤ (V.Constr c' vs) | c' == c -> vs √ó Œ≤
      Val Œ≤ (V.Fun (V.PartialConstr c' vs)) | c' == c -> vs √ó Œ≤
      _ -> error absurd
   { init: vs', last: v2 } = definitely' (unsnoc vs)

apply2Bwd :: forall a. Ann a => (AppTrace √ó AppTrace) √ó Val a -> Val a √ó Val a √ó Val a
apply2Bwd ((t1 √ó t2) √ó v) =
   let
      u2 √ó v2 = applyBwd (t2 √ó v)
      u1 √ó v1 = applyBwd (t1 √ó u2)
   in
      u1 √ó v1 √ó v2

evalBwd :: forall a. Ann a => Raw Env -> Raw Expr -> Val a -> Trace -> Env a √ó Expr a √ó a
evalBwd Œ≥ e v t =
   expand Œ≥' Œ≥ √ó expand e' e √ó Œ±
   where
   Œ≥' √ó e' √ó Œ± = evalBwd' v t

-- Computes a partial slice which evalBwd expands to a full slice.
evalBwd' :: forall a. Ann a => Val a -> Trace -> Env a √ó Expr a √ó a
evalBwd' v (T.Var x) = maplet x v √ó Var x √ó bot
evalBwd' v (T.Op op) = maplet op v √ó Op op √ó bot
evalBwd' (Val Œ± (V.Str str)) T.Const = empty √ó Str Œ± str √ó Œ±
evalBwd' (Val Œ± (V.Int n)) T.Const = empty √ó Int Œ± n √ó Œ±
evalBwd' (Val Œ± (V.Float n)) T.Const = empty √ó Float Œ± n √ó Œ±
evalBwd' (Val Œ± (V.Fun (V.Closure Œ≥ _ œÉ))) T.Const = Œ≥ √ó Lambda Œ± œÉ √ó Œ±
evalBwd' (Val Œ± (V.Record xvs)) (T.Record xts) =
   foldr (‚à®) empty (xŒ≥eŒ±s <#> fst)
      √ó Record Œ± (xŒ≥eŒ±s <#> (fst <<< snd))
      √ó foldr (‚à®) Œ± (xŒ≥eŒ±s <#> (snd <<< snd))
   where
   xvts = intersectionWith (√ó) xvs xts
   xŒ≥eŒ±s = xvts <#> uncurry evalBwd'
evalBwd' (Val Œ± (V.Dictionary (DictRep sŒ±vs))) (T.Dictionary stts sus) =
   foldr (‚à®) empty ((Œ≥eŒ±s <#> fst) <> (Œ≥eŒ±s' <#> fst))
      √ó Dictionary Œ± ((Œ≥eŒ±s <#> (fst <<< snd)) `P.zip` (Œ≥eŒ±s' <#> (fst <<< snd)))
      √ó foldr (‚à®) Œ± ((Œ≥eŒ±s <#> (snd <<< snd)) <> (Œ≥eŒ±s' <#> (snd <<< snd)))
   where
   sŒ±vs' = expand sŒ±vs (sus <#> (bot √ó _))
   Œ≥eŒ±s = stts <#> \(s √ó t √ó _) -> evalBwd' (Val (fst (get s sŒ±vs')) (V.Str s)) t
   Œ≥eŒ±s' = stts <#> \(s √ó _ √ó t) -> evalBwd' (snd (get s sŒ±vs')) t
evalBwd' (Val Œ± (V.Constr _ vs)) (T.Constr c ts) =
   Œ≥' √ó Constr Œ± c es √ó Œ±'
   where
   evalArg_bwd :: Val a √ó Trace -> Endo (Env a √ó List (Expr a) √ó a)
   evalArg_bwd (v' √ó t') (Œ≥' √ó es √ó Œ±') = (Œ≥' ‚à® Œ≥'') √ó (e : es) √ó (Œ±' ‚à® Œ±'')
      where
      Œ≥'' √ó e √ó Œ±'' = evalBwd' v' t'
   Œ≥' √ó es √ó Œ±' = foldr evalArg_bwd (empty √ó Nil √ó Œ±) (zip vs ts)
evalBwd' (Val Œ± (V.Matrix (MatrixRep (vss √ó (_ √ó Œ≤i) √ó (_ √ó Œ≤j))))) (T.Matrix tss (x √ó y) (i' √ó j') t') =
   (Œ≥ ‚à® Œ≥') √ó Matrix Œ± e (x √ó y) e' √ó (Œ± ‚à® Œ±' ‚à® Œ±'')
   where
   NonEmptyList ijs = nonEmpty $ singleton =<< (range 1 i' `lift2 (√ó)` range 1 j')

   evalBwd_elem :: (Int √ó Int) -> Env a √ó Expr a √ó a √ó a √ó a
   evalBwd_elem (i √ó j) =
      case evalBwd' (vss ! (i - 1) ! (j - 1)) (tss ! (i - 1) ! (j - 1)) of
         Œ≥'' √ó e √ó Œ±' ->
            let
               Œ≥ √ó Œ≥' = append_inv (singleton x ‚à™ singleton y) Œ≥''
               Œ≥0 = (maplet x (Val bot (V.Int i')) `disjointUnion` maplet y (Val bot (V.Int j'))) <+> Œ≥'
            in
               unsafePartial $
                  let
                     Val Œ≤ (V.Int _) √ó Val Œ≤' (V.Int _) = get x Œ≥0 √ó get y Œ≥0
                  in
                     Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤'
   Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤' = foldl1
      ( \(Œ≥1 √ó e1 √ó Œ±1 √ó Œ≤1 √ó Œ≤1') (Œ≥2 √ó e2 √ó Œ±2 √ó Œ≤2 √ó Œ≤2') ->
           ((Œ≥1 ‚à® Œ≥2) √ó (e1 ‚à® e2) √ó (Œ±1 ‚à® Œ±2) √ó (Œ≤1 ‚à® Œ≤2) √ó (Œ≤1' ‚à® Œ≤2'))
      )
      (evalBwd_elem <$> ijs)
   Œ≥' √ó e' √ó Œ±'' =
      evalBwd' (Val bot (V.Constr cPair (Val (Œ≤ ‚à® Œ≤i) (V.Int i') : Val (Œ≤' ‚à® Œ≤j) (V.Int j') : Nil))) t'
evalBwd' v (T.Project t x) =
   Œ≥ √ó Project e x √ó Œ±
   where
   Œ≥ √ó e √ó Œ± = evalBwd' (Val bot (V.Record (maplet x v))) t
evalBwd' v (T.App t1 t2 t3) =
   (Œ≥ ‚à® Œ≥') √ó App e e' √ó (Œ± ‚à® Œ±')
   where
   u √ó v2 = applyBwd (t3 √ó v)
   Œ≥ √ó e √ó Œ± = evalBwd' u t1
   Œ≥' √ó e' √ó Œ±' = evalBwd' v2 t2
evalBwd' v (T.Let (T.VarDef w t1) t2) =
   (Œ≥1 ‚à® Œ≥1') √ó Let (VarDef œÉ e1) e2 √ó Œ±1
   where
   Œ≥1Œ≥2 √ó e2 √ó Œ±2 = evalBwd' v t2
   Œ≥1 √ó Œ≥2 = append_inv (bv w) Œ≥1Œ≥2
   v' √ó œÉ = matchBwd Œ≥2 (ContExpr (Record bot (Dict D.empty))) Œ±2 w
   Œ≥1' √ó e1 √ó Œ±1 = evalBwd' v' t1
evalBwd' v (T.LetRec (RecDefs _ œÅ) t) =
   (Œ≥1 ‚à® Œ≥1') √ó LetRec (RecDefs (Œ± ‚à® Œ±') œÅ') e √ó (Œ± ‚à® Œ±')
   where
   Œ≥1Œ≥2 √ó e √ó Œ± = evalBwd' v t
   Œ≥1 √ó Œ≥2 = append_inv (Set.fromFoldable $ keys œÅ) Œ≥1Œ≥2
   Œ≥1' √ó œÅ' √ó Œ±' = closeDefsBwd Œ≥2
evalBwd' _ _ = error absurd

type TracedEval =
   { gc :: GaloisConnection (EnvExpr ùîπ) (Val ùîπ)
   , v :: Raw Val
   }

traceGC :: forall m. MonadError Error m => Raw EnvExpr -> m TracedEval
traceGC (EnvExpr Œ≥ e) = do
   t √ó v <- eval (EnvExpr Œ≥ e) bot
   let
      bwd v' = let Œ≥' √ó e' √ó _ = evalBwd Œ≥ e v' t in EnvExpr Œ≥' e'
      fwd (EnvExpr Œ≥' e') = snd $ defined $ eval (EnvExpr Œ≥' e') top
   pure $ { gc: GC { fwd, bwd }, v }

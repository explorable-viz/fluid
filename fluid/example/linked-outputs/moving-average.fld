let newPoints offset = map (fun point -> { x: point.x, y: (point.y + offset) }) points;
let getByX xVal data =
    let helper [] = [];
        helper (x : xs) =
            if x.x == xVal
            then x
            else helper xs
    in helper data;

let points' = newPoints 0;
    cavgs = mAvgChop points' 1;
    cavgs' = mAvgShrink points' 1;
    savgs = sAvgShrink points' 2
in MultiView {|
    "line-chart-1" :=
        LineChart {
            tickLabels: { x: Default, y: Default },
            size: { width: 330, height: 285 },
            caption: "Moving averages",
            plots: [ LinePlot { name: "Simple", points: savgs }
                   , LinePlot { name: "Central", points: cavgs }
                   , LinePlot { name: "Original Curve", points: points' } ]
        },
    "desc" :=
        LinkedText( [ "Simple moving averages are computed using the most recent n examples, "
                    , "whereas central moving averages use datapoints either side of the year in question. "
                    , "The moving average for 2015 was "
                    , numToStr (getByX 2015 cavgs).y, " "
                    , "we see that the simple moving average for the same year is actually "
                    , gradedLeqP (getByX 2015 savgs).y (getByX 2015 cavgs).y ])

|}

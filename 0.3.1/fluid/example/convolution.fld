
let bound =
    fun (lower, upper) x →
        match (x > upper, x < lower) as {
            (True, _) → upper;
            (_, True) → lower;
            (_, _)    → x
        }

let sum =
    fun xs → foldr (fun (x, y) → x + y) 0 xs

letrec 
    fun quot' a b c → match (a - b > 0) as {
        True  → quot' (a - b) b (c + 1);
        False → c
    }
    fun quot a b → 
        quot' a b 0

let conv_extend =
    fun image filter →
        let ((ma, na), (mz, nz)) = bounds image 
            ((ia, ja), (iz, jz)) = bounds filter
            half_width           = quot (jz - ja) 2
            half_height          = quot (iz - ia) 2
            spatial_extent       = (iz - ia + 1) * (jz - ja + 1)
        in  array (bounds image) 
                [((c, d), (sum [ image!(image_y, image_x) * filter!(filter_y, filter_x) 
                                |   (y, x)       <- range (bounds filter),
                                    let filter_y = iz - y,
                                    let filter_x = jz - x,
                                    let image_y  = bound (ma, mz) (c + y - half_height), 
                                    let image_x  = bound (na, nz) (d + x - half_width)
                                ]) / spatial_extent)
                                    | (c, d) <- range (bounds image) ]
